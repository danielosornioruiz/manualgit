CURSO DE GIT

# CONFIGURACION GLOBAL INICIAL 

git config --global user.name "Daniel Osornio Ruiz"
git config --global user.email daniel_osornio_cbt303@hotmail.com
# inidicar el nombre "main" como la rama principal por defecto
git config --global init.defaultBranch main
# indicar a git VS code como editor por defecto
git config --global core.editor "code --wait"
# abrir el archivo de configuracion global para corroborar 
git config --global -e 
# configuracion para indicar el como debe ser tratados los saltos de linea
## usuario windows  
git config --global core.autocrlf true
## usuario linux o mac  
git config --global core.autocrlf input 



# COMANDOS PARA PASAR A STAGE
git status # para ver los cambios 
gid add <nombre del archivo>
git add . # incluye todos los archivos listados "es mala practica"
# "gid add" admite expreciones regulares 
id add *.txt

# COMANDO PARA CONFIRMAR LOS CAMBIOS 
git commit -m "<comentario haciendo referencia a los cambios realizados>" 
git commit # esto abre el editr de codigo vscode y te permite insertar el comentario



# EJEMPLO: ELIMINAR UN ARCHIVO -> pasarlo a STAGE y confirmar cambios con COMMIT
rm <archivo>
git status # confirmas la lista de archivos
git add <archivo>
git commit -m "Se elimino el <archivo> por...."

# FORMA ACORTADA DE ELIMINAR UN ARCHIVO Y PASARLO A STAGE LISTO PARA COMMIT
git rm <archivo>
git commit -m "Se elimino el <archivo> por...."



# RECUPERAR UN ARCHIVO ELIMINADO EN STAGE
git restore --staged <archivo>
	# restaurar en archivo a disco
	git restore <archivo>


# Cambiando el nombre de un archivo
mv archivo1.txt archivo.txt
git status
	# debe aparecer dos cambios un delete y un nuevo archivo
# se agregan ambos cambios
git add archivo1.txt archivo.txt
git status 
	# te muestra ya en STAGE la accion "renamed"
git commit -m "se renombro un archivo tal a tal"

# Forma acortada y paso a STAGE
git mv archivo.txt archivo1.txt


# EXCLUYENDO ARCHIVOS A SEGUIR

touch .gitignore
	# dentro del archivo puedes incluir los nombres de archivos o la ruta de carpetas que no van a ser incluidas en git
	ejemplo:
	.env
	temp/
# El archivo .gitignore se debe incluir incluir a git para que forme parte del proyecto
git add .gitignore
git commit -m "Se agrega el archivo .gitignore"




# USANDO git diff
	# modificas un archivo
git diff
	# te mostrara los cambios echos en el archivo
# si agregar el cambio a STAGE para poder ver la diferencia se usa
git diff --staged
	# te mostrara los cambios echos en el archivo


# Ver los cambios echos en nuestro proyecto usando git log
git log
	# te muestra los cambios echos de una forma verbosa, extendida 
git log --oneline
	# te muesta cada cambio en una sola linea mostrandote el identificador y el comentario


# Flujo para cuando hay mas de dos personas trabajando con el mismo proyecto
# se ramifica el codigo
# se modifica
# se hacen los commit
# se hace un merge a la rama principal 

# mostrar el nombre de la rama en la cual estamos trabajando
git branch 

#  crear una ramificacion 
git checkout -b <nombre>
	# buenas practicas ejemplo
git checkout -b features/nombre-de-la-funcionalidad
git checkout -b <Ticket>

	# al ejecutar el checkout te cambiara de rama

# para regresar a la rama main
git checkout main

# agregar los cambios a main 
	# DEBES ESTAR EN LA RAMA main PRA PODER INCLUIR LOS CAMBIOS DE LA <RAMAB>
git merge <ramab>


# listar totas las ramas 
git branch -a



# subir el repositorio de git local a github

#agregar "origen" despues de haber creado el reposito en github

git remote add origin https://github.com/danielosornioruiz/manualgit.git

# crear la rama main en el origen
git push -u origin main
	# al dar enter te pedira login, usuario + token

# para el primer push 
git push -u origin main

#para los siguiente push

git push 


